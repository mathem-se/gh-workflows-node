on:
  workflow_call:
    inputs:
      domain:
        required: true
        type: string
      node-version:
        type: number
        required: false
        default: 16
    secrets:
      NODE_AUTH_TOKEN:
        required: true
      SEMANTIC_RELEASE_TOKEN:
        required: true
      AWS_CICD_ACCOUNT:
        required: true
      AWS_CICD_API_URL:
        required: true
      AWS_CICD_API_REGION:
        required: true

jobs:
  BranchToUseForAccount:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.calculate-branch.outputs.branch }}
    steps:
      - id: calculate-branch
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "branch=develop" >> $GITHUB_ENV
          fi
  Account:
    needs: [BranchToUseForAccount]
    uses: mathem-se/gh-account-mapping/.github/workflows/workflow.yml@main
    with:
      branch: ${{ needs.BranchToUseForAccount.outputs.branch}}
      role-session-name: 'github-actions-oidc-session'
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_CICD_ACCOUNT }}
      AWS_API: ${{ secrets.AWS_CICD_API_URL }}
      AWS_REGION: ${{ secrets.AWS_CICD_API_REGION }}

  Test:
    needs: [Account]
    uses: ./.github/workflows/step-test-deploy.yml
    with:
      domain: ${{ inputs.domain }}
      node-version: ${{ inputs.node-version }}
    secrets:
      NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      AWS_ACCOUNT: ${{ needs.Account.outputs.account }}
      AWS_API_REGION: ${{ secrets.AWS_CICD_API_REGION }}

  Release:
    needs: [Test]
    uses: ./.github/workflows/step-release-gh-package.yml
    with:
      node-version: ${{ inputs.node-version }}
    secrets:
      NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      SEMANTIC_RELEASE_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
